/**
 * @author: Vikas Dayananda
 **/


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/**
 * This program will read the file that contains a compressed binary code. Creates a Dicitonary for 256 characters.
 *Decompresses the file to using Lempel–Ziv–Welch Decompression Algorithm. 
 * Outputs the original text in Decoded_text file. 
 */

public class Decoder {

	static int bitlength;                         //Stores number of bits for binary code.
	static String s, file;                       // Stores Location of input file.
	static String string;                       //String generated by newstring.
	static String newstring;                   //decoded string from code.
	static File f;                            //Stores File path.
	static StringBuilder sbr;                //Buffered reader reading data from input file.
	static String a[];                      // Array to split input arguments.
	static String line="";                 //Command line arguments.

	public static void main(String[] args) throws InterruptedException, IOException {

		try {
			
			// Split the arguments.
			for (int i = 0; i < args.length; i++) {
				if (line.equals(""))
					line = line + args[i];
				else
					line = line + " " + args[i];
			}
			a = line.split(" ");
			
			//Store file path
			file = a[0];
			System.out.println(a[0]);
			
			//Store bit length.
			bitlength = Integer.parseInt(a[1]);

			//copy file to the string sbr
			f = new File(file);
			BufferedReader bfr = new BufferedReader(new FileReader(f));
			s = bfr.readLine();
			sbr = new StringBuilder();
			while (s != null) {
				sbr.append(s);
				s = bfr.readLine();
			}
			
			//Call decompression method.
			decompress();
			
		} catch (FileNotFoundException e) {

			System.out.println("no file found");
			System.out.println("Enter the file name and bit length seperated by space.");

		} catch (IOException e) {

			System.out.println("Give input!! ");

		} catch (ArrayIndexOutOfBoundsException e) {
			if (a.length != 2) {
				System.out.println("input format is not valid");

			} else
				System.out.println(e.getMessage());
		}

	}


	private static void decompress() throws IOException {

		StringBuilder output = new StringBuilder();
		int s = 0;
		String bitmodifier = "";
		
		//Create a dictionary of 256 characters.
		ArrayList<String> dictionary = new ArrayList<>(255);
        for (int i = 0; i < bitlength; i++) {
			bitmodifier = bitmodifier + "0";
		}
		for (int i = 0; i < 256; i++) {
			String temp = (char) (i) + "";
			dictionary.add(temp);
		}
		
		System.out.println("Input code is "+ sbr);
		
		//Decompression logic
		for (String s1 : sbr.toString().split(" ")) {
			int code = Integer.parseInt(s1, 2);
			if (code >= dictionary.size()) {
				newstring = string + string.charAt(0);
		
			} else {
				newstring = dictionary.get(code);
			}
			output.append(newstring);
			if (dictionary.indexOf(string + newstring.charAt(0)) == -1 && s == 1) {
				dictionary.add(string + newstring.charAt(0));
			}
			string = newstring;
		
			s = 1;
		}

		System.out.println("Decompressed string is " +  output.toString());
		
		//generat decoded file
		File fout = new File(file.replace(".lzw", "_decoded.txt"));
		BufferedWriter bwr;
		try {
			bwr = new BufferedWriter(new FileWriter(fout));
			bwr.write(output.toString());
			bwr.flush();
			System.out.println("File generated - " + fout);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}

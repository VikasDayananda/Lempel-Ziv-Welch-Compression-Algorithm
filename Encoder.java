/**
 * @author: Vikas Dayananda
**/

/**
 * This program will read the file that contains a line of text. Creates a Dicitonary for 256 characters.
 * Compresses the file to using Lempel–Ziv–Welch Compression Algorithm. 
 * Outputs Compressed file in .lzw which contains binary code for the text. 
 */


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;


public class Encoder {
	static int bitlength;                          //Stores number of bits for binary code.
	static String file;                           // Stores Location of input file.
	static String a[];                           // Array to split input arguments.
	static File f;                              // Stores File path.
	static BufferedReader reader;              // Reads the file.
	static BufferedWriter writer;             // Writes the file.
	static String string = "";               // Contains String generated by encoding logic
	static String symbol = null;            //Symbol string representation of char sequence from files
	static String line="";                    //Command line arguments

	public static void main(String[] args) throws InterruptedException, IOException {

		try {

			
			// Split the arguments.
			for (int i = 0; i < args.length; i++) {
				if (line.equals(""))
					line = line + args[i];
				else
					line = line + " " + args[i];
			}
			a = line.split(" ");
			
			//Store file path
			file = a[0];
			
			//Store bit length.
			bitlength = Integer.parseInt(a[1]);
       	
			//Call compression method.
			compress();
			
		} catch (FileNotFoundException e) {

			System.out.println("no file found");
			System.out.println("Enter the file name and bit length seperated by space.");

		} catch (IOException e) {

			System.out.println("Give input!! ");

		} catch (ArrayIndexOutOfBoundsException e) {
			if (a.length != 2) {
				System.out.println("input format is not valid");

			} else
				System.out.println(e.getMessage());
		}

	}

	
	private static void compress() throws IOException {
		// TODO Auto-generated method stub
		
		
		String bitmodifier = "";
		
		//Create a dictionary of 256 characters.
		ArrayList<String> dictionary = new ArrayList<>(255);
		for (int i = 0; i < bitlength; i++) {
			bitmodifier = bitmodifier + "0";
		}
		for (int i = 0; i < 256; i++) {
			String temp = (char) (i) + "";
			dictionary.add(temp);
		}
		
		StringBuilder output = new StringBuilder();

		String line;
		reader = new BufferedReader(new FileReader(file));
		
		while ((line = reader.readLine()) != null) {
			System.out.println("Input String is "+ line);
			int inc = 0;
			while (inc < line.length()) {
				symbol = line.charAt(inc) + "";
				
				if (dictionary.contains(string + symbol)) {
					string = string + symbol;
					
					
				} else {
					
					//Create binary for the code in Binarized and append it.
					String binarized = Integer.toBinaryString(dictionary.indexOf(string));
					
					if (binarized.length() < bitlength)
						binarized = bitmodifier.substring(0, bitlength - binarized.length()).concat(binarized) + " ";
					else
						binarized = binarized.substring(binarized.length() - bitlength) + " ";

					output.append(binarized);
					dictionary.add(string + symbol + "");
					string = symbol;
				}
				
				inc++;
			}
			
			//Create binary for the code in Binarized and append it.
			String binarized = Integer.toBinaryString(dictionary.indexOf(string));
			if (binarized.length() < bitlength)
				binarized = bitmodifier.substring(0, bitlength - binarized.length()).concat(binarized);
			else
				binarized = binarized.substring(binarized.length() - bitlength);
			output.append(binarized);
			System.out.println("Compressed code is "+ output.toString());
			
			//Create .lzw file and write binary codes.
			File fout = new File(file.replace(".txt", ".lzw"));
			BufferedWriter bwr;
			try {
				bwr = new BufferedWriter(new FileWriter(fout));
				bwr.write(output.toString());
				bwr.flush();
				System.out.println("File generated - " + fout);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}
}
